COURS bibiliotheque

CREATE DATABASE bibiliotheque;

USE bibiliotheque;

CREATE TABLE abonne (
  id_abonne INT(3) NOT NULL AUTO_INCREMENT,
  prenom VARCHAR(15) NOT NULL,
  PRIMARY KEY (id_abonne)
) ENGINE=InnoDB ;

INSERT INTO abonne (id_abonne, prenom) VALUES
(1, 'Guillaume'),
(2, 'Benoit'),
(3, 'Chloe'),
(4, 'Laura');


CREATE TABLE livre (
  id_livre INT(3) NOT NULL AUTO_INCREMENT,
  auteur VARCHAR(25) NOT NULL,
  titre VARCHAR(30) NOT NULL,
  PRIMARY KEY (id_livre)
) ENGINE=InnoDB ;

INSERT INTO livre (id_livre, auteur, titre) VALUES
(100, 'GUY DE MAUPASSANT', 'Une vie'),
(101, 'GUY DE MAUPASSANT', 'Bel-Ami '),
(102, 'HONORE DE BALZAC', 'Le p�re Goriot'),
(103, 'ALPHONSE DAUDET', 'Le Petit chose'),
(104, 'ALEXANDRE DUMAS', 'La Reine Margot'),
(105, 'ALEXANDRE DUMAS', 'Les Trois Mousquetaires');

CREATE TABLE emprunt (
  id_emprunt INT(3) NOT NULL AUTO_INCREMENT,
  id_livre INT(3) DEFAULT NULL,
  id_abonne INT(3) DEFAULT NULL,
  date_sortie DATE NOT NULL,
  date_rendu DATE DEFAULT NULL,
  FOREIGN KEY (id_livre) REFERENCES livre(id_livre), 
  FOREIGN KEY (id_abonne) REFERENCES abonne(id_abonne), 
  PRIMARY KEY  (id_emprunt)
) ENGINE=InnoDB ;

INSERT INTO emprunt (id_emprunt, id_livre, id_abonne, date_sortie, date_rendu) VALUES
(1, 100, 1, '2016-12-07', '2016-12-11'),
(2, 101, 2, '2016-12-07', '2016-12-18'),
(3, 100, 3, '2016-12-11', '2016-12-19'),
(4, 103, 4, '2016-12-12', '2016-12-22'),
(5, 104, 1, '2016-12-15', '2016-12-30'),
(6, 105, 2, '2017-01-02', '2017-01-15'),
(7, 105, 3, '2017-02-15', NULL),
(8, 100, 2, '2017-02-20', NULL);

---------------------------------------------------------------------------------

-- Récupérer le titre des livres qui n'ont pas encore été rendus

SELECT livre.titre FROM livre INNER JOIN emprunt ON emprunt.id_livre = livre.id_livre WHERE emprunt.date_rendu IS NULL;
SELECT titre FROM livre WHERE id_livre IN (SELECT id_livre FROM emprunt WHERE date_rendu IS NULL);

-- Récupérer le prénom des abonnés qui n'ont pas encore rendu leur livre

SELECT abonne.prenom FROM abonne INNER JOIN emprunt ON emprunt.id_abonne = abonne.id_abonne WHERE emprunt.date_rendu IS NULL;
SELECT prenom FROM abonne WHERE id_abonne IN (SELECT id_abonne FROM emprunt WHERE date_rendu IS NULL);

-- Afficher les numéros des livres empruntés par Chloé

SELECT emprunt.id_livre FROM emprunt INNER JOIN abonne ON emprunt.id_abonne = abonne.id_abonne WHERE prenom = 'Chloe';
SELECT id_livre FROM emprunt WHERE id_abonne IN (SELECT id_abonne FROM abonne WHERE prenom = 'Chloe');

-- Afficher les prénoms des abonnés ayant emprunté un livre à la date du 07/12/2016

SELECT prenom FROM abonne WHERE id_abonne IN (SELECT id_abonne FROM emprunt WHERE date_sortie = '2016-12-07');

-- Afficher le nombre de livre emprunté par Guillaume

SELECT COUNT(id_livre) FROM emprunt WHERE id_abonne IN (SELECT id_abonne FROM abonne WHERE prenom = 'Guillaume');

-- Afficher le titre des livres empruntés par Chloé

SELECT titre FROM livre WHERE id_livre IN (SELECT id_livre FROM emprunt WHERE id_abonne IN (SELECT id_abonne FROM abonne WHERE prenom = 'Chloe'));

-- Afficher le titre des livres que Chloé n'a pas encore emprunté

SELECT titre FROM livre WHERE id_livre IN (SELECT id_livre FROM emprunt WHERE id_abonne IN (SELECT id_abonne FROM abonne WHERE prenom != 'Chloe'));

-- Connaitre le prénom des abonnés qui ont emprunté le livre d'Alphonse Daudet

SELECT prenom FROM abonne WHERE id_abonne IN (SELECT id_abonne FROM emprunt WHERE id_livre IN (SELECT id_livre FROM livre WHERE auteur = 'ALPHONSE DAUDET'));

-------------------------------------------------------------------------------------------

-- Afficher les dates de sortie et d’entrée de Guillaume pour rendre un livre.

SELECT date_sortie, date_rendu FROM emprunt WHERE id_abonne IN (SELECT id_abonne FROM abonne WHERE prenom = 'Guillaume');
** SELECT prenom, date_sortie, date_rendu FROM emprunt e, abonne a WHERE e.id_abonne = a.id_abonne AND a.prenom = 'Guillaume';

-- Afficher les mouvements des livres D'Alphonse Daudet

SELECT date_sortie, date_rendu FROM emprunt WHERE id_livre IN (SELECT id_livre FROM livre WHERE auteur = 'ALPHONSE DAUDET');
** SELECT titre, prenom, date_sortie, date_rendu FROM emprunt e, abonne a, livre l WHERE e.id_livre = l.id_livre AND e.id_abonne = a.id_abonne AND auteur = 'ALPHONSE DAUDET';
 
-- Afficher le ou les abonnés qui ont emprunté le livre “Une vie” sur l’année 2016.

SELECT id_abonne FROM emprunt WHERE date_sortie LIKE '2016%' AND id_livre IN (SELECT id_livre FROM livre WHERE titre = 'Une vie');
**  SELECT a.prenom, l.titre, e.date_rendu
FROM emprunt e, livre l, abonne a
WHERE e.id_livre = l.id_livre
AND a.id_abonne = e.id_abonne
AND l.titre = 'Une vie'
AND YEAR(e.date_sortie) = 2016;

-- Afficher le nombre de livres empruntés par chaque abonné

SELECT prenom, COUNT(id_livre) FROM abonne a, emprunt e WHERE e.id_abonne = a.id_abonne GROUP BY e.id_abonne;

-- Afficher le nombre de livres à rendre pour chaque abonné

SELECT prenom, COUNT(id_livre) FROM abonne a, emprunt e WHERE a.id_abonne = e.id_abonne AND e.date_rendu IS NULL GROUP BY e.id_abonne;


-- Qui a emprunté quoi et quand?

SELECT a.id_abonne, a.prenom, l.id_livre, l.titre, e.date_sortie 
FROM abonne a, livre l, emprunt e 
WHERE a.id_abonne = e.id_abonne
AND l.id_livre = e.id_livre;

or

-- INNER JOIN

SELECT a.id_abonne, a.prenom, l.id_livre, l.titre, e.date_sortie 
FROM abonne a
INNER JOIN emprunt e ON a.id_abonne = e.id_abonne
INNER JOIN livre l ON l.id_livre = e.id_livre;


-- LEFT JOIN

SELECT a.id_abonne, a.prenom, e.date_sortie 
FROM abonne a
LEFT JOIN emprunt e ON a.id_abonne = e.id_abonne;

-- RIGHT JOIN

SELECT a.id_abonne, a.prenom, e.date_sortie 
FROM abonne a
RIGHT JOIN emprunt e ON a.id_abonne = e.id_abonne;

---------------------------------------------------------------------------------------

-- Fonctions prédéfinies

-- récupérer depuuis la table emprunt, l'id de l'emprunt, et la date de l'emprunt mais formatter la date en francais : j-m-a

SELECT id_emprunt, DATE_FORMAT(date_sortie, '%d-%m-%Y') FROM emprunt;

(https://practicaldatascience.co.uk/data-science/how-to-use-date-format-to-reformat-dates-in-mysql)

-- trouver comment hasher un mdp de passe en SQL

SELECT MD5('test');

(https://sql.sh/fonctions/md5)


-- m'afficher une concaténation pour tous les abonnés avec l'id_abonne_prenom depuis la table abonné

SELECT CONCAT (id_abonne, '_', prenom) FROM abonne;


-- créer une fonction qui attendra l'id d'un livre, et un prénom
-- et qui permettra de retourner une phrase qui dit : 'prénom à emprunt le livre n° id_livr
-- -> savoir qui emprunté quoi
-- -> et que mon select me renvoit pour chaque abonné, 'prénom à emprunt le livre n° id_livre' en passant par l'appel de notre fonction utilisateur
-- -> ConcatFirstNameAndIdBook

DELIMITER //
CREATE FUNCTION ConcatFirstNameAndIdBook (first_name VARCHAR(45), id_book INT)
RETURNS VARCHAR(225)
BEGIN
RETURN CONCAT (first_name, ' a emprunt livre ', id_book);
END//
DELIMITER ;

SELECT ConcatFirstNameAndIdBook(prenom, id_livre)
FROM abonne a, emprunt e
WHERE a.id_abonne = e.id_abonne;

-------------------------------------------------------------------------------------------------------


-- PROCÉDURE STOCKÉE : récupérer le titre des livres que Chloé n'a pas encore emprunté
-- cette requête est assez compliquée à mettre en place c'est pourquoi vous devrez la stocker dans une procédure stockée pour pouvoir la requéter quand vous le souhaitez
-- sans devoir à réécrire la requête

SELECT titre FROM livre WHERE id_livre NOT IN (
SELECT id_livre FROM emprunt WHERE id_abonne ) IN (
SELECT id_abonne FROM abonne WHERE prenom = 'Chloe');

DELIMITER // 

CREATE PROCEDURE booksNotBorrowed(first_name VARCHAR(45))

BEGIN

SELECT titre FROM livre WHERE id_livre NOT IN (
SELECT id_livre FROM emprunt WHERE id_abonne IN (
SELECT id_abonne FROM abonne WHERE prenom = first_name));

END //

DELIMITER;

CALL booksNotBorrowed('Chloe');


-- VUES EN SQL
-- vous souhaitez en un coup d'oeil savoir qui a emprunté quoi
-- la requête est assez complexe alors vous décidez de créer une vue en SQL
-- que vous pourrez récupérez quand vous le souhaitez pour savoir qui a emprunté quoi sans refaire la requête
-- LA VUE STOCKÉE SERA COMME UNE SORTE DE NOUVELLE TABLE AVEC LES DONNÉES RECHERCHÉES

** La différence entre " Une Vues " et " Table Temporaire "
Une vue est de réprésentation virtuelle de donnée qui synchonise avec les base de données;
Un table temporaire est un stockage temporaire pour le momment de requête;  **


CREATE VIEW view_loan AS
SELECT prenom, titre, date_sortie
FROM abonne a, livre l, emprunt e
WHERE a.id_abonne = e.id_abonne
AND l.id_livre = e.id_livre;

SHOW TABLES;

SELECT * FROM view_loan;

----------------------------------------------
INSERT INTO emprunt (id_emprunt, id_livre, id_abonne, date_sortie, date_rendu) VALUES (9, 104, 4, '2018-01-05', '2018-01-12');


-- Table Temporaire

CREATE TEMPORARY TABLE borrow2017 AS
SELECT prenom, id_livre FROM abonne a , emprunt e 
WHERE a.id_abonne = e.id_abonne
AND date_sortie LIKE '2017%';   --(YEAR(date_sortie) = 2017;)

INSERT INTO emprunt (id_emprunt, id_livre, id_abonne, date_sortie, date_rendu) VALUES (10, 101, 3, '2017-05-05', '2017-05-12');



-- SE RENSEIGNER SUR ROLLBACK ET COMMIT EN SQL (ON EXPLIQUERA CA ENSEMBLE MARDI)

ROLLBACK: annuler le dernier modification avant de confirmer la transaction
COMMIT: valider le mise à jour de transaction

-- démarrer une transaction
-- récupérer toutes les infos de abonné
-- faire une mise à jour sur un abonné
-- vérifier avec un select que la mise à jour est ok
-- avec un rollback vous allez revenir en arrière
-- vérifier que vous êtes revenu à l'état d'avant

START TRANSACTION;
INSERT INTO abonne (id_abonne, prenom) VALUES (8, 'Lin'), (9, 'Andrew');
ROLLBACK;


START TRANSACTION;
SELECT * FROM abonne;
UPDATE abonne SET prenom = 'Titi' WHERE id_abonne = 1;
SELECT * FROM abonne;
ROLLBACK;  
 ou COMMIT;

------------------------------------------------------------------------------------------

-- SHOW VARIABLES

SELECT @@version;

-- CREER VARIABLE

SET @shlag = "Sam";
SELECT @shlag;

-- requêtes préparées

-- Analyse
-- Interprétation

PREPARE requete1 FROM ' SELECT * FROM abonne WHERE prenom = "Chloé" ';

-- Exécution
EXECUTE requete1;
EXECUTE requete1;
EXECUTE requete1;
EXECUTE requete1;
EXECUTE requete1;

 ** Combien d'étapes ont été exécuté ci-dessus?
On est passé à 7 étapes au lieu de 15 étapes d'exécutées en faisent préparer une requête

--

SET @name = "Chloé";
PREPARE requete2 FROM ' SELECT * FROM abonne WHERE prenom = ? ';
EXECUTE requete2 USING @name;










